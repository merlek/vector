!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("vector",[],n):"object"==typeof exports?exports.vector=n():t.vector=n()}(window,(function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)e.d(r,u,function(n){return t[n]}.bind(null,u));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";var r=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,u,o=e.call(t),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(t){u={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(u)throw u.error}}return i},u=this&&this.__spread||function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(r(arguments[n]));return t};Object.defineProperty(n,"__esModule",{value:!0});var o=e(1),i=e(2);n.toRadians=function(t){return t*Math.PI/180};var a=function(){function t(t){this.values=t,this.values=t}return t.create=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return new t(n)},t.fill=function(n,e){return new t(o.repeat(n)(e))},t.random2D=function(n){var e=new t([1,0]).rotate(o.random(0)(2*Math.PI));return null!=n?e.setMag(n):e},t.heading=function(t){return Math.atan2(t[1],t[0])},t.normalize=function(n){return t.setMag(n,1)},t.rotate=function(t,n){return[t[0]*Math.cos(n)-t[1]*Math.sin(n),t[0]*Math.sin(n)+t[1]*Math.cos(n)]},t.getMag=function(t){return Math.sqrt(t.reduce((function(t,n){return t+n*n}),0))},t.setMag=function(n,e){var r=t.getMag(n);return n.map((function(t){return t/r*e}))},t.limit=function(n,e){return t.getMag(n)>e?t.setMag(n,e):n},t.dist=function(t,n){return Math.sqrt(t.reduce((function(t,e,r){return t+Math.pow(n[r]-e,2)}),0))},t.add=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];if(n.length<=1)return 1===n.length?n[0]:[];var r=n[0],i=t.add.apply(t,u(o.dropFirst(n)));return r.map((function(t,n){return t+i[n]}))},t.subtract=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];if(n.length<=1)return 1===n.length?n[0]:[];var r=n[0],i=t.add.apply(t,u(o.dropFirst(n)));return r.map((function(t,n){return t-i[n]}))},t.mult=function(t){for(var n=[],e=1;e<arguments.length;e++)n[e-1]=arguments[e];var r=1===n.length?n[0]:n.reduce((function(t,n){return t*n}),1);return t.map((function(t){return t*r}))},t.dotProduct=function(t,n){return t.reduce((function(t,e,r){return t+e*n[r]}),0)},t.prototype[Symbol.iterator]=function(){return this.getIterator()},t.prototype.getIterator=function(){return new i.VectorIterator(this)},t.prototype.get=function(t){return this.values[t]},t.prototype.toArray=function(){return u(this.values)},Object.defineProperty(t.prototype,"magnitude",{get:function(){return null!=this._magnitude?this._magnitude:this._magnitude=t.getMag(this.values)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"heading",{get:function(){return t.heading(this.values)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.values.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.values[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.values[1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"z",{get:function(){return this.values[2]},enumerable:!0,configurable:!0}),t.prototype.normalize=function(){return this.setMag(1)},t.prototype.rotate=function(n){return new t(t.rotate(this.values,n))},t.prototype.setMag=function(n){return new t(t.mult(this.values,n/this.magnitude))},t.prototype.limit=function(t){return this.magnitude>t?this.setMag(t):this},t.prototype.dist=function(n){return t.dist(this.values,n.values)},t.prototype.add=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return n.length<1?this:new t(t.add.apply(t,u([this.values],n.map((function(t){return t.values})))))},t.prototype.subtract=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return n.length<1?this:new t(t.subtract.apply(t,u([this.values],n.map((function(t){return t.values})))))},t.prototype.mult=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return new t(t.mult.apply(t,u([this.values],n)))},t.prototype.copy=function(){return new t(this.values)},t.prototype.dotProduct=function(n){return t.dotProduct(this.values,n.values)},t}();n.Vector=a},function(t,n,e){window,t.exports=function(t){var n={};function e(r){if(n[r])return n[r].exports;var u=n[r]={i:r,l:!1,exports:{}};return t[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)e.d(r,u,function(n){return t[n]}.bind(null,u));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),u=0;for(n=0;n<e;n++)for(var o=arguments[n],i=0,a=o.length;i<a;i++,u++)r[u]=o[i];return r};function u(t){return function(n){return t}}function o(t){return function(n){return n.map(t)}}function i(t){return function(n){return n.map((function(n,e){return t(n)(e)}))}}function a(t){return function(n){var e;return(e={})[t]=n,e}}function c(t){return function(n){return Array.apply(null,Array(n-t)).map((function(n,e){return t+e}))}}function f(t){return function(n){return Math.floor(Math.random()*n)+t}}Object.defineProperty(n,"__esModule",{value:!0}),n.dropFirst=function(t){return t.slice(1)},n.dropLast=function(t){return t.slice(0,t.length-1)},n.id=function(t){return t},n.keep=u,n.map=o,n.mapi=i,n.adjust=function(t){return function(n){return function(e){return i((function(e){return function(r){return r===t?n(e):e}}))(e)}}},n.merge=function(t){var n=Array.isArray(t)?[]:{};return function(e){return Object.assign(n,t,e)}},n.mod=function(t){return function(n){return(n%t+t)%t}},n.objOf=a,n.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return r(t).reduce((function(t,n){return n(t)}),n)}},n.prop=function(t){return function(n){return n[t]}},n.range=c,n.repeat=function(t){return function(n){return o(u(t))(c(0)(n))}},n.randomInt=f,n.random=function(t){if(Array.isArray(t))return t[f(0)(t.length)];if("number"==typeof t)return function(n){return Math.random()*n+t};throw Error("Incompatible parameter type: "+typeof t)},n.spec=function(t){return function(n){return Object.keys(t).map((function(e){return a(e)(t[e](n))})).reduce((function(t,n){return Object.assign(t,n)}))}},n.mapRange=function(t){return function(n,e){return function(r,u){return(t-n)*(u-r)/(e-n)+r}}}}])},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t){this.vector=t,this.index=0}return t.prototype[Symbol.iterator]=function(){return this},t.prototype.next=function(){return{value:this.vector.get(this.index++),done:this.index>this.vector.length}},t}();n.VectorIterator=r}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,